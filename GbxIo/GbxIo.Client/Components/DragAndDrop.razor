@using GBX.NET
@using GbxIo.Client.Data
@using GbxIo.Client.Tools
@using GbxIo.Components.Services

<ReuUploadArea>
    <div>
        @Text
    </div>
    <div style="font-size: 18px">
        @SubText
    </div>

    @if (Tool is not null)
    {
        var (input, output) = GetToolInputOutput(Tool);

        <div class="tool-info">
            <h2>@Tool.Name</h2>

            @if (!string.IsNullOrEmpty(input) && !string.IsNullOrEmpty(output))
            {
                <p>Input: <span style="color: #FFD700">@input</span>, Output: <span style="color: #FFD700">@output</span></p>
            }

            <p>@report</p>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(problemText))
    {
        <div class="tool-problem @problemClass">
            @problemText
        </div>
    }
</ReuUploadArea>

@code {
    private string? problemText;
    private string? problemClass;
    private string? report;

    [Parameter]
    public string Text { get; set; } = "Test";

    [Parameter]
    public string SubText { get; set; } = string.Empty;

    [Parameter]
    public IoTool? Tool { get; set; }

    private (string, string) GetToolInputOutput(IoTool tool)
    {
        var toolType = tool.GetType();

        var genericArgs = ToolService.GetIoToolBaseType(toolType)?.GetGenericArguments();

        if (genericArgs is null || genericArgs.Length != 2)
        {
            return ("", "");
        }

        var inputType = GetTypeName(genericArgs[0]);
        var outputType = GetTypeName(genericArgs[1], isOutput: true);

        return (inputType, outputType);
    }

    private string GetTypeName(Type type, bool isOutput = false, bool multiple = false)
    {
        if (type == typeof(BinData))
        {
            return "Binary file" + (multiple ? "s" : "");
        }

        if (type == typeof(TextData))
        {
            return "Text file" + (multiple ? "s" : "");
        }

        if (type == typeof(GbxData))
        {
            return $"{(isOutput ? "" : "Any ")}Gbx file{(multiple ? "s" : "")}{(isOutput ? "" : " (can be zipped)")}";
        }

        if (type == typeof(Gbx))
        {
            return "Supported Gbx file" + (multiple ? "s" : "") + (isOutput ? "" : " (can be zipped)");
        }

        var typeDef = type.GetGenericTypeDefinition();

        if (typeDef == typeof(Gbx<>))
        {
            var innerType = type.GetGenericArguments()[0];

            return $"Gbx file{(multiple ? "s" : "")} ({innerType.Name}){(isOutput ? "" : " (can be zipped)")}";
        }

        if (typeDef == typeof(IEnumerable<>))
        {
            return $"Multiple {GetTypeName(type.GetGenericArguments()[0], isOutput, multiple: true)}";
        }

        return type.Name;
    }
}
