<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="GbxIo.styles.css" />
    <link rel="stylesheet" href="_content/GbxIo.Components/app.css" />
    <link rel="stylesheet" href="_content/GbxIo.Components/GbxIo.Components.bundle.scp.css" />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">

    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_content/BlazorMonaco/jsInterop.js"></script>
    <script src="_content/BlazorMonaco/lib/monaco-editor/min/vs/loader.js"></script>
    <script src="_content/BlazorMonaco/lib/monaco-editor/min/vs/editor/editor.main.js"></script>
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script type="module">
        import { BrotliDecode } from './decode.min.js';
        Blazor.start({
            webAssembly: {
                loadBootResource: function (type, name, defaultUri, integrity) {
                    if (type !== 'dotnetjs' && location.hostname !== 'localhost' && type !== 'configuration' && type !== 'manifest') {
                        return (async function () {
                            const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                            if (!response.ok) {
                                throw new Error(response.statusText);
                            }
                            const originalResponseBuffer = await response.arrayBuffer();
                            const originalResponseArray = new Int8Array(originalResponseBuffer);
                            const decompressedResponseArray = BrotliDecode(originalResponseArray);
                            const contentType = type ===
                                'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';
                            return new Response(decompressedResponseArray,
                                { headers: { 'content-type': contentType } });
                        })();
                    }
                }
            }
        });
    </script>
    <script src="_content/GbxIo.Components/app.js"></script>
</body>

</html>
