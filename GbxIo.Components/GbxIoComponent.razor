@using GBX.NET
@using System.IO.Compression
@using GBX.NET.Exceptions
@using System.Text

@inject ToolService ToolService
@inject IJSRuntime JS

@rendermode InteractiveAuto

<PageTitle>@GetTitle()</PageTitle>

<HeadContent>
    <meta property="og:title" content="@GetTitle()">
    <meta name="twitter:title" content="@GetTitle()">
</HeadContent>

<DragAndDrop Text="@(string.IsNullOrEmpty(Tool) ? TextWhenUnavailable : TextWhenAvailable)"
             SubText="@(string.IsNullOrEmpty(Tool) ? SubTextWhenUnavailable : SubTextWhenAvailable)"
             OnFile="OnFileAsync"
             OnDragEnd="OnDragEnd"
             Tool="Tool is null ? null : ToolService.GetTool(Tool)"></DragAndDrop>
<ToolMenu Highlight="HighlightToolMenu"></ToolMenu>

@if (TextOutput is not null)
{
    <TextOutput TextData="@TextOutput"></TextOutput>
}

@code {
    private const string TextWhenAvailable = "Drag and Drop";
    private const string SubTextWhenAvailable = "files, or CLICK to select files";

    private const string TextWhenUnavailable = "Select an I/O Tool";
    private const string SubTextWhenUnavailable = "on the left side, then import files";

    [Parameter]
    public string? Tool { get; set; }

    public TextData? TextOutput { get; set; }

    public bool HighlightToolMenu { get; set; }

    async Task OnFileAsync(BinData data)
    {
        if (Tool is null)
        {
            HighlightToolMenu = true;
            return;
        }

        foreach (var output in await ToolService.ProcessFileAsync(Tool, data))
        {
            await ProcessOutputAsync(output);
        }
    }

    private async Task ProcessOutputAsync(object? output)
    {
        if (output is IEnumerable<object> enumerable)
        {
            foreach (var item in enumerable)
            {
                await ProcessOutputAsync(item);
            }

            return;
        }

        if (output is TextData textData)
        {
            TextOutput = textData;

            if (textData.Format is "obj" or "mtl")
            {
                var ms = new MemoryStream(Encoding.UTF8.GetBytes(textData.Text));
                await DownloadAsync(textData.FileName, ms);
                return;
            }
        }

        if (output is BinData binData)
        {
            var ms = new MemoryStream(binData.Data);

            await DownloadAsync(binData.FileName, ms);
            return;
        }

        if (output is GbxData gbxData)
        {
            var ms = new MemoryStream(gbxData.Data);

            await DownloadAsync(gbxData.FileName, ms);
            return;
        }

        if (output is Gbx gbx)
        {
            var ms = new MemoryStream();

            gbx.Save(ms);
            ms.Position = 0;

            await DownloadAsync(gbx.FilePath, ms);
            return;
        }
    }

    void OnDragEnd()
    {
        HighlightToolMenu = false;
    }

    string GetTitle()
    {
        var title = "Gbx I/O";
        var toolName = string.IsNullOrEmpty(Tool)
            ? null : ToolService.GetTool(Tool)?.Name;

        if (toolName is not null)
        {
            title += $" - {toolName}";
        }

        return title;
    }

    async Task DownloadAsync(string? fileName, MemoryStream ms)
    {
        using var streamRef = new DotNetStreamReference(ms);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
