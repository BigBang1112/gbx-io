@using GBX.NET
@using System.IO.Compression
@using GBX.NET.Exceptions
@using System.Text

@inject ToolService ToolService
@inject IJSRuntime JS

@rendermode InteractiveWebAssembly

<PageTitle>@GetTitle()</PageTitle>

<HeadContent>
    <meta property="og:title" content="@GetTitle()">
    <meta name="twitter:title" content="@GetTitle()">
</HeadContent>

<DragAndDrop Text="@(string.IsNullOrEmpty(Tool) ? TextWhenUnavailable : TextWhenAvailable)"
             SubText="@(string.IsNullOrEmpty(Tool) ? SubTextWhenUnavailable : SubTextWhenAvailable)"
             OnFile="OnFileAsync"
             OnDragEnd="OnDragEnd"
             Tool="Tool is null ? null : ToolService.GetTool(Tool)"></DragAndDrop>
<ToolMenu Highlight="HighlightToolMenu"></ToolMenu>

@if (TextOutput?.Count > 0)
{
    <TextOutput @ref="textOutput" TextData="@TextOutput" OnEmpty="StateHasChanged"></TextOutput>
}

@code {
    private TextOutput? textOutput;

    private const string TextWhenAvailable = "Drag and Drop";
    private const string SubTextWhenAvailable = "files, or CLICK to select files";

    private const string TextWhenUnavailable = "Select an I/O Tool";
    private const string SubTextWhenUnavailable = "on the left side, then import files";

    [Parameter]
    public string? Tool { get; set; }

    public List<TextData> TextOutput { get; set; } = new();

    public bool HighlightToolMenu { get; set; }

    async Task OnFileAsync(BinData data)
    {
        if (Tool is null)
        {
            HighlightToolMenu = true;
            return;
        }

        using var msZip = new MemoryStream();
        using (var zip = new ZipArchive(msZip, ZipArchiveMode.Create, leaveOpen: true))
        {
            foreach (var output in await ToolService.ProcessFileAsync(Tool, data))
            {
                await ProcessOutputAsync(output, zip);
            }
        }

        if (msZip.Length == 0)
        {
            return;
        }

        msZip.Position = 0;
        var actualEntriesCount = 0;
        var hasFolders = false;
        using (var zipVerify = new ZipArchive(msZip, ZipArchiveMode.Read, leaveOpen: true))
        {
            actualEntriesCount = zipVerify.Entries.Count(x => !string.IsNullOrEmpty(x.Name));
            hasFolders = zipVerify.Entries.Any(x => x.FullName.Contains("/"));
        }

        if (!hasFolders)
        {
            return;
        }

        msZip.Position = 0;
        await DownloadAsync($"Gbx IO - {actualEntriesCount} files.zip", msZip);
    }

    private async Task ProcessOutputAsync(object? output, ZipArchive zip)
    {
        if (output is IEnumerable<object> enumerable)
        {
            foreach (var item in enumerable)
            {
                await ProcessOutputAsync(item, zip);
            }

            return;
        }

        if (output is TextData textData)
        {
            TextOutput.Add(textData);

            if (textData.Format is "obj" or "mtl")
            {
                var ms = new MemoryStream(Encoding.UTF8.GetBytes(textData.Text));
                await DownloadOrAddToZipAsync(textData.FileName, ms, zip);
            }

            if (textOutput is not null)
            {
                await textOutput.SetToNewestIndexAsync();
            }

            return;
        }

        if (output is BinData binData)
        {
            var ms = new MemoryStream(binData.Data);
            await DownloadOrAddToZipAsync(binData.FileName, ms, zip);
            return;
        }

        if (output is GbxData gbxData)
        {
            var ms = new MemoryStream(gbxData.Data);
            await DownloadOrAddToZipAsync(gbxData.FileName, ms, zip);
            return;
        }

        if (output is Gbx gbx)
        {
            var ms = new MemoryStream();
            gbx.Save(ms);
            ms.Position = 0;
            await DownloadOrAddToZipAsync(gbx.FilePath, ms, zip);
            return;
        }
    }

    async Task DownloadOrAddToZipAsync(string? fileName, MemoryStream ms, ZipArchive zip)
    {
        if (fileName?.Contains("/") == true)
        {
            var entry = zip.CreateEntry(fileName);
            using var entryStream = entry.Open();
            await ms.CopyToAsync(entryStream);
        }
        else
        {
            await DownloadAsync(fileName, ms);
        }
    }

    void OnDragEnd()
    {
        HighlightToolMenu = false;
    }

    string GetTitle()
    {
        var title = "Gbx I/O";
        var toolName = string.IsNullOrEmpty(Tool)
            ? null : ToolService.GetTool(Tool)?.Name;

        if (toolName is not null)
        {
            title += $" - {toolName}";
        }

        return title;
    }

    async Task DownloadAsync(string? fileName, MemoryStream ms)
    {
        using var streamRef = new DotNetStreamReference(ms);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
